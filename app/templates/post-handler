<?php

namespace {NAMESPACE}\Handler;

use Timber\Timber;
use {ENTITY_NAMESPACE}\{ENTITY_NAME};
use {NAMESPACE}\DTO\{ENTITY_NAME}DTO;

/**
 * Class {ENTITY_NAME}Handler
 * @package {NAMESPACE}\Handler
 */
class {ENTITY_NAME}Handler
{
  /**
   * Post getter
   * @param mixed $pid
   * @return \{ENTITY_NAMESPACE}\{ENTITY_NAME}
   */
  public static function getPost($pid = null)
  {
    return new {ENTITY_NAME}($pid);
  }

  /**
   * Posts getter
   * @param array $query_args (wp_query format)
   * @return \{ENTITY_NAMESPACE}\{ENTITY_NAME}[]
   */
  public static function getPosts($query_args = [])
  {
    $args = array_unique(array_merge($query_args, ['post_type' => '{POST_TYPE}']));
    return Timber::get_posts($args, '\{ENTITY_NAMESPACE}\{ENTITY_NAME}');
  }

  /**
   * Post's dto getter
   * @param mixed $post
   * @return array
   */
  public static function getPostDTO($post = null)
  {
    if (!$post instanceof {ENTITY_NAME}) {
      $post = new {ENTITY_NAME}($post);
    }

    $dto = new {ENTITY_NAME}DTO($post);
    return $dto->getData();
  }

  /**
   * Posts' dto getter
   * @param array $query_args (wp_query format)
   * @return array
   */
  public static function getPostsDTO($query_args = [])
  {
    $posts = self::getPosts($query_args);
    return array_map(function($post) {
      $dto = new {ENTITY_NAME}DTO($post);
      return $dto->getData();
    }, $posts);
  }
}
