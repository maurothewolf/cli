<?php

namespace {NAMESPACE}\Repository;

use Timber\Timber;
use Timber\Post;
use Wordrobe\Feature\RepositoryInterface;

/**
 * Class Repository
 * @package {NAMESPACE}\Repository
 */
class Repository implements RepositoryInterface
{
  /**
   * @var string $post_type
   */
  protected static $post_type = ['post', 'page'];

  /**
   * @var string $entity_class
   */
  protected static $entity_class = '\{NAMESPACE}\Entity\Entity';

  /**
   * @var string $dto_class
   */
  protected static $dto_class = '\{NAMESPACE}\DTO\DTO';

  /**
   * Returns an Entity from a Timber\Post
   * @param mixed $post
   * @return \{NAMESPACE}\Entity\Entity
   */
  public static function getEntityByPost($post = null)
  {
    if (!$post instanceof Post) {
      $post = new Post($post);
    }

    $title = $post->title();
    $content = $post->content();
    $url = $post->link();

    return new static::$entity_class($title, $content, $url);
  }

  /**
   * Returns all Entities from query
   * @param false|array $query_args (wp_query format)
   * @return \{NAMESPACE}\Entity\Entity[]
   */
  public static function getAllEntities($query_args = false)
  {
    $posts = Timber::get_posts($query_args);
    return array_map(function($post) {
      return self::getEntityByPost($post);
    }, $posts);
  }

 /**
  * Returns a DTO from a Timber\Post
  * @param mixed $post
  * @return \{NAMESPACE}\DTO\DTO
  */
  public static function getDTOByPost($post = null)
  {
    $entity = self::getEntityByPost();
    return new static::$dto_class($entity);
  }

  /**
   * Returns all DTOs from query
   * @param false|array $query_args (wp_query format)
   * @return \{NAMESPACE}\DTO\DTO[]
   */
  public static function getAllDTO($query_args = false)
  {
    $entities = self::getAllEntities($query_args);
    return array_map(function($entity) {
      return new static::$dto_class($entity);
    }, $entities);
  }

  /**
   * Returns Entity's data formatted by DTO
   * @param mixed $post
   * @return array
   */
  public static function getFormattedDataByPost($post = null)
  {
    $dto = self::getDTOByPost($post);
    return $dto->getData();
  }

  /**
   * Returns all Entities' data formatted by DTO
   * @param false|array $query_args (wp_query format)
   * @return array
   */
  public static function getAllFormattedData($query_args = false)
  {
    $dtos = self::getAllDTO($query_args);
    return array_map(function($dto) {
      return $dto->getData();
    }, $dtos);
  }
}
